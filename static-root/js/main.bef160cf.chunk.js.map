{"version":3,"sources":["blogs/components.js","lookup/components.js","App.js","serviceWorker.js","index.js"],"names":["BlogsComponent","props","textAreaRef","React","createRef","useState","newBlogs","setnewBlogs","className","onSubmit","event","preventDefault","newVal","current","value","tempNewBlogs","unshift","content","likes","id","ref","required","name","placeholder","type","Bloglist","blogsInit","setBlogsInit","blogs","setBlogs","useEffect","final","concat","length","callback","xhr","XMLHttpRequest","responseType","open","onload","response","status","onerror","e","send","loadblogs","map","item","index","Blog","blog","key","ActionBtn","action","setLikes","userLike","setuserLike","actiondisp","display","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.bef160cf.chunk.js","sourcesContent":["import react, {useEffect, useState} from 'react'\r\nimport React from \"react\";\r\nimport {loadblogs} from \"../lookup\";\r\n\r\n\r\n// Always use first letter capital for function in React.js //\r\n\r\nexport function BlogsComponent(props) {\r\n    const textAreaRef = React.createRef()\r\n    const [newBlogs, setnewBlogs] = useState([])\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault()\r\n        const newVal = textAreaRef.current.value\r\n        let tempNewBlogs = [...newBlogs]\r\n        tempNewBlogs.unshift({\r\n            content: newVal,\r\n            likes: 0,\r\n            id: 12345\r\n        })\r\n        setnewBlogs(tempNewBlogs)\r\n        textAreaRef.current.value = ''\r\n    }\r\n    return <div className={props.className}>\r\n        <div className='col-12 mb-3'>\r\n            <form onSubmit={handleSubmit}>\r\n        <textarea ref={textAreaRef} required={true} className='form-control' name='blogpost' placeholder='Your Blog...'>\r\n        </textarea>\r\n                <button type='submit' className='btn btn-danger'> Post</button>\r\n            </form>\r\n        </div>\r\n        <Bloglist newBlogs={newBlogs}/>\r\n    </div>\r\n}\r\n\r\n\r\nexport function Bloglist(props) {\r\n    const [blogsInit, setBlogsInit] = useState([])\r\n    const [blogs, setBlogs] = useState([])\r\n    useEffect(() => {\r\n        const final = ([...props.newBlogs].concat(blogsInit))\r\n        if (final.length !== blogs.length) {\r\n            setBlogs(final)\r\n        }\r\n    }, [props.newBlogs, blogs, blogsInit])\r\n    useEffect(() => {\r\n        const CallBack = (response, status) => {\r\n            if (status === 200) {\r\n                setBlogsInit(response)\r\n            }\r\n        }\r\n        loadblogs(CallBack)\r\n    }, [blogsInit])\r\n    return blogs.map((item, index) => {\r\n            return <Blog blog={item} className={'my-3 py-2 border bg-dark'} key={'${index}-{item.id}'}/>\r\n        }\r\n    )\r\n}\r\n\r\nexport function ActionBtn(props) {\r\n    const {blog, action} = props\r\n    const [likes, setLikes] = useState(blog.likes ? blog.likes : 0)\r\n    const [userLike, setuserLike] = useState(blog.userLike === true)\r\n    const className = props.className ? props.className : 'btn btn-danger btn-sm'\r\n    const actiondisp = action.display ? action.display : 'Action'\r\n\r\n    const handleClick = (event) => {\r\n        event.preventDefault()\r\n        if (action.type === 'like') {\r\n            if (userLike === true) {\r\n                setLikes(likes - 1)\r\n                setuserLike(false)\r\n            } else {\r\n                setLikes(likes + 1)\r\n                setuserLike(true)\r\n            }\r\n        }\r\n    }\r\n    const display = action.type === 'like' ? <div>{likes} {actiondisp}</div> : actiondisp\r\n    return <button className={className} onClick={handleClick}>{display}</button>\r\n}\r\n\r\nexport function Blog(props) {\r\n    const {blog} = props\r\n    const className = props.className ? props.className : 'col-10 mx-auto col-md-6'\r\n    return <div className={className}>\r\n        <p>{blog.content}</p>\r\n        <div className='btn btn-group'>\r\n            <ActionBtn blog={blog} action={{type: \"like\", display: \"Likes\"}}/>\r\n            <ActionBtn blog={blog} action={{type: \"unlike\", display: \"Unlike\"}}/>\r\n            <ActionBtn blog={blog} action={{type: \"comment\", display: \"Comments\"}}/>\r\n        </div>\r\n    </div>\r\n}","export function loadblogs(callback) {\r\n    const xhr = new XMLHttpRequest()\r\n    const method = 'GET' //'POST'\r\n    const url = \"http://localhost:8000/api/blogs/\"\r\n    const responseType = \"json\"\r\n    xhr.responseType = responseType\r\n    xhr.open(method, url)\r\n    xhr.onload = function () {\r\n        callback(xhr.response, xhr.status)\r\n    }\r\n    xhr.onerror = function (e) {\r\n        callback({\"message\": \"Request Error\"}, 400)\r\n    }\r\n    xhr.send()\r\n}","import React, {useEffect, useState} from 'react';\nimport './App.css';\n\nimport {BlogsComponent} from \"./blogs\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <h1>BLOGST</h1>\n                <div>\n                    <BlogsComponent />\n                </div>\n            </header>\n        </div>\n    )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}